// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ioAV.proto

#ifndef PROTOBUF_ioAV_2eproto__INCLUDED
#define PROTOBUF_ioAV_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace ioAV {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ioAV_2eproto();
void protobuf_AssignDesc_ioAV_2eproto();
void protobuf_ShutdownFile_ioAV_2eproto();

class Perception;

// ===================================================================

class Perception : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:ioAV.Perception) */ {
 public:
  Perception();
  virtual ~Perception();

  Perception(const Perception& from);

  inline Perception& operator=(const Perception& from) {
    CopyFrom(from);
    return *this;
  }

  static const Perception& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Perception* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Perception* other);

  // implements Message ----------------------------------------------

  inline Perception* New() const { return New(NULL); }

  Perception* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Perception& from);
  void MergeFrom(const Perception& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Perception* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional fixed64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint64 timestamp() const;
  void set_timestamp(::google::protobuf::uint64 value);

  // optional int32 sync_flag = 3;
  void clear_sync_flag();
  static const int kSyncFlagFieldNumber = 3;
  ::google::protobuf::int32 sync_flag() const;
  void set_sync_flag(::google::protobuf::int32 value);

  // optional bytes body = 4;
  void clear_body();
  static const int kBodyFieldNumber = 4;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // optional string checkCode = 5;
  void clear_checkcode();
  static const int kCheckCodeFieldNumber = 5;
  const ::std::string& checkcode() const;
  void set_checkcode(const ::std::string& value);
  void set_checkcode(const char* value);
  void set_checkcode(const char* value, size_t size);
  ::std::string* mutable_checkcode();
  ::std::string* release_checkcode();
  void set_allocated_checkcode(::std::string* checkcode);

  // @@protoc_insertion_point(class_scope:ioAV.Perception)
 private:

  ::google::protobuf::internal::ArenaStringPtr _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  bool _is_default_instance_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 sync_flag_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::google::protobuf::internal::ArenaStringPtr checkcode_;
  mutable int _cached_size_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ioAV_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ioAV_2eproto();
  #endif
  friend void protobuf_AssignDesc_ioAV_2eproto();
  friend void protobuf_ShutdownFile_ioAV_2eproto();

  void InitAsDefaultInstance();
  static Perception* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Perception

// optional int32 type = 1;
inline void Perception::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Perception::type() const {
  // @@protoc_insertion_point(field_get:ioAV.Perception.type)
  return type_;
}
inline void Perception::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ioAV.Perception.type)
}

// optional fixed64 timestamp = 2;
inline void Perception::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Perception::timestamp() const {
  // @@protoc_insertion_point(field_get:ioAV.Perception.timestamp)
  return timestamp_;
}
inline void Perception::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:ioAV.Perception.timestamp)
}

// optional int32 sync_flag = 3;
inline void Perception::clear_sync_flag() {
  sync_flag_ = 0;
}
inline ::google::protobuf::int32 Perception::sync_flag() const {
  // @@protoc_insertion_point(field_get:ioAV.Perception.sync_flag)
  return sync_flag_;
}
inline void Perception::set_sync_flag(::google::protobuf::int32 value) {
  
  sync_flag_ = value;
  // @@protoc_insertion_point(field_set:ioAV.Perception.sync_flag)
}

// optional bytes body = 4;
inline void Perception::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perception::body() const {
  // @@protoc_insertion_point(field_get:ioAV.Perception.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perception::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ioAV.Perception.body)
}
inline void Perception::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ioAV.Perception.body)
}
inline void Perception::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ioAV.Perception.body)
}
inline ::std::string* Perception::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:ioAV.Perception.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perception::release_body() {
  // @@protoc_insertion_point(field_release:ioAV.Perception.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perception::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:ioAV.Perception.body)
}

// optional string checkCode = 5;
inline void Perception::clear_checkcode() {
  checkcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Perception::checkcode() const {
  // @@protoc_insertion_point(field_get:ioAV.Perception.checkCode)
  return checkcode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perception::set_checkcode(const ::std::string& value) {
  
  checkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ioAV.Perception.checkCode)
}
inline void Perception::set_checkcode(const char* value) {
  
  checkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ioAV.Perception.checkCode)
}
inline void Perception::set_checkcode(const char* value, size_t size) {
  
  checkcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ioAV.Perception.checkCode)
}
inline ::std::string* Perception::mutable_checkcode() {
  
  // @@protoc_insertion_point(field_mutable:ioAV.Perception.checkCode)
  return checkcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Perception::release_checkcode() {
  // @@protoc_insertion_point(field_release:ioAV.Perception.checkCode)
  
  return checkcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Perception::set_allocated_checkcode(::std::string* checkcode) {
  if (checkcode != NULL) {
    
  } else {
    
  }
  checkcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkcode);
  // @@protoc_insertion_point(field_set_allocated:ioAV.Perception.checkCode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ioAV

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ioAV_2eproto__INCLUDED

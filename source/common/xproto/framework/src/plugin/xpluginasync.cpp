/*!
 * -------------------------------------------
 * Copyright (c) 2019, Horizon Robotics, Inc.
 * All rights reserved.
 * \File     plugin.cpp
 * \Author   Yingmin Li
 * \Mail     yingmin.li@horizon.ai
 * \Contributor Songshan Gong
 * \Mail     songshan.gong@horizon.ai
 * \Version  1.0.0.0
 * \Date     2019-07-28
 * \Brief    XPluginAsync implementation
 * \DO NOT MODIFY THIS COMMENT, \
 * \WHICH IS AUTO GENERATED BY EDITOR
 * -------------------------------------------
 */
#include "xproto/plugin/xpluginasync.h"

#include "hobotlog/hobotlog.hpp"
#include "xproto/manager/msg_manager.h"
#include "xproto/plugin/xplugin.h"

namespace horizon {
namespace vision {
namespace xproto {

int XPluginAsync::Init() {
  for (auto &msginfo : msg_map_) {
    XPlugin::RegisterMsg(msginfo.first);
  }
  return 0;
}

void XPluginAsync::RegisterMsg(const std::string &type,
                               XProtoMessageFunc callback) {
  HOBOT_CHECK(msg_map_.count(type) == 0)
      << "type:" << type << " already registered.";
  msg_map_[type] = callback;
}

int XPluginAsync::DeInit() {
  for (auto &msginfo : msg_map_) {
    XPlugin::UnRegisterMsg(msginfo.first);
  }
  return 0;
}

void XPluginAsync::OnMsg(XProtoMessagePtr msg) {
  // todo
  // 实现消息队列和流量控制
  if (msg_handle_.GetTaskNum() >= 30) {
      LOGW << "Task Size: " << msg_handle_.GetTaskNum();
  }

  // if (msg_handle_.GetTaskNum() < 30) {
  msg_handle_.PostTask(std::bind(&XPluginAsync::OnMsgDown, this, msg));
  //  } else {
  //    LOGI << "Task Max Size = 30";
  //  }
}

void XPluginAsync::OnMsgDown(XProtoMessagePtr msg) {
  HOBOT_CHECK(msg_map_.count(msg->type()))
      << "No message type:" << msg->type() << " registered in " << desc();
  msg_map_[msg->type()](msg);
}

XPluginAsync::XPluginAsync() {
  msg_handle_.CreatThread(1);
  LOGI << "XPluginAsync() cons";
}
XPluginAsync::XPluginAsync(int thread_num) {
  msg_handle_.CreatThread(thread_num);
  LOGD << "set XPluginAsync thread num = " << thread_num;
}

#ifdef PYAPI
void XPluginAsync::RegMsg(const std::string &type,
                          std::function<void(pybind11::object)> cb) {
  auto callback = [=](XProtoMessagePtr msg) -> int {
    pybind11::object py_input = pybind11::cast(msg);
    cb(py_input);
    return 0;
  };
  RegisterMsg(type, callback);
}
#endif

}  // namespace xproto
}  // namespace vision
}  // namespace horizon

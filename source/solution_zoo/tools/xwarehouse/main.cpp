/**
 * Copyright (c) 2019 Horizon Robotics. All rights reserved.
 * @brief     xwarehouse demo, including addition, deletion, modification, and
 * feature comparison, the features used are written hard.
 * @file      main.cpp
 * @date      2019.4.19
 */
#include <string.h>

#include <iostream>
extern "C" {
#include "xwarehouse/xwarehouse.h"
#include "xwarehouse/xwarehouse_data.h"
}

#define ENCRYPT_FEATURE

#define FEATURE_SIZE 128

#ifdef ENCRYPT_FEATURE
#define FEATURE_ATTR 1
#else
#define FEATURE_ATTR ((1 << 6) | 1)
#endif

// 非加密的特征
#ifndef ENCRYPT_FEATURE
int feature_attr = FEATURE_ATTR;

float p1_feat1[FEATURE_SIZE] = {
    -0.202275,   0.0876475,  0.0623246,   -0.0226249, -0.0703416,  -0.0492198,
    0.0031991,   0.0835234,  -0.00181154, -0.0154173, 0.00844099,  -0.0705729,
    -0.0806327,  -0.177762,  -0.0407018,  0.017807,   -0.064059,   0.0435925,
    0.0256699,   -0.0439394, -0.0187321,  -0.108037,  -0.128773,   -0.0205821,
    -0.124148,   0.138371,   -0.0323764,  -0.0672196, -0.175449,   -0.0105609,
    -0.0142225,  0.116555,   0.0170747,   0.0318753,  0.00894205,  -0.0853735,
    -0.137253,   0.0210447,  -0.156563,   0.0663331,  -0.1667,     -0.0180383,
    0.0660247,   0.0213145,  -0.0754293,  0.00277512, -0.00740032, 0.0276741,
    -0.00277512, 0.030218,   0.063134,    -0.0327618, -0.00616693, 0.084063,
    -0.0998272,  0.0711895,  -0.0359224,  -0.0567358, -0.0738876,  -0.0387746,
    0.15321,     -0.0939687, -0.108037,   -0.0369245, -0.113433,   -0.0381579,
    -0.00404705, -0.0263636, -0.0589328,  0.110311,   -0.204203,   -0.0652153,
    0.00161882,  -0.0583932, 0.10056,     -0.157681,  0.0372714,   0.0218926,
    0.159492,    0.0279439,  -0.176606,   -0.0497595, -0.0700718,  0.20744,
    -0.0580848,  -0.0608985, -0.0906539,  -0.0270189, -0.0312972,  0.00847953,
    -0.0223166,  0.0031991,  0.0999043,   0.0696478,  -0.0792451,  0.0915404,
    0.0620933,   0.0900372,  0.19661,     -0.0915404, 0.0428602,   -0.00612839,
    -0.00161882, 0.210331,   0.004895,    -0.0543847, 0.0433613,   -0.118135,
    0.144114,    0.17595,    -0.0735407,  0.0545774,  0.0326462,   -0.0107921,
    0.0970907,   -0.0317983, -0.0941228,  -0.019079,  -0.146696,   0.227483,
    -0.0235114,  -0.0420508, -0.0249375,  0.00034689, 0.0248605,   0.0460978,
    -0.00659091, 0.167124};
float p1_feat2[FEATURE_SIZE] = {
    -0.213095,   0.0857876,  0.0532061,  -0.0222498,   -0.0705416,  -0.0500331,
    0.0176451,   0.0838141,  -0.0016252, -0.015749,    0.00808733,  -0.0682199,
    -0.0792094,  -0.171653,  -0.0415975, 0.0174129,    -0.0645825,  0.0394692,
    0.0255776,   -0.0441514, -0.0192703, -0.10854,     -0.131022,   -0.0208181,
    -0.130326,   0.146114,   -0.0349419, -0.0697677,   -0.173781,   -0.0107186,
    -0.00928688, 0.119298,   0.0263515,  0.0217081,    0.00878384,  -0.0862132,
    -0.13555,    0.0255002,  -0.157026,  0.0695742,    -0.16728,    -0.0167551,
    0.0694581,   0.0212437,  -0.0660142, -0.00711994,  -0.00294085, 0.0249972,
    -0.00545604, 0.027938,   0.0592813,  -0.0333554,   -0.00862906, 0.0818793,
    -0.0978605,  0.0712768,  -0.0440353, -0.0470148,   -0.0655499,  -0.0320784,
    0.154085,    -0.0925592, -0.106412,  -0.0353288,   -0.105754,   -0.0439579,
    -0.00410171, -0.0361027, -0.0612547, 0.10587,      -0.207368,   -0.0627638,
    0.00158651,  -0.0635377, 0.100608,   -0.146191,    0.0422166,   0.0311884,
    0.161708,    0.0182255,  -0.177689,  -0.0513487,   -0.0605582,  0.20524,
    -0.0639634,  -0.0540574, -0.0816472, -0.0282863,   -0.0333554,  0.0103704,
    -0.0187672,  0.00572691, 0.10262,    0.0676781,    -0.0845493,  0.100801,
    0.0627251,   0.0880706,  0.198004,   -0.0918627,   0.0489883,   -0.011183,
    -0.0114538,  0.211122,   0.00537865, -0.0614482,   0.0338197,   -0.109121,
    0.144334,    0.185622,   -0.0740242, 0.0548313,    0.0321945,   -0.0107186,
    0.113687,    -0.031885,  -0.0961579, -0.0244555,   -0.140309,   0.219944,
    -0.0234107,  -0.0426423, -0.0277446, -0.000348258, 0.024765,    0.0456605,
    -0.00433388, 0.162907};
float p1_feat3[FEATURE_SIZE] = {
    -0.213747,   0.0911336,  0.0504291,  -0.0244458,  -0.0683791,   -0.0435489,
    0.00922483,  0.0929017,  0.00737986, -0.0135298,  0.0173734,    -0.0606533,
    -0.0802945,  -0.175156,  -0.0359,    0.0145675,   -0.0701472,   0.045586,
    0.0256373,   -0.0506981, -0.0223702, -0.109161,   -0.130109,    -0.0204484,
    -0.126803,   0.140294,   -0.0345931, -0.0695322,  -0.172082,    -0.010032,
    -0.00895577, 0.116271,   0.017335,   0.025253,    0.00426648,   -0.0854066,
    -0.132107,   0.0313644,  -0.153939,  0.0664188,   -0.163049,    -0.0269058,
    0.0657269,   0.0210634,  -0.072684,  0.0029212,   -0.000807173, 0.0320563,
    -0.00557334, 0.0292504,  0.0631132,  -0.0420499,  -0.00342087,  0.0787186,
    -0.0974757,  0.0757589,  -0.043472,  -0.0565405,  -0.059577,    -0.0316719,
    0.157206,    -0.0917102, -0.10278,   -0.0410121,  -0.115387,    -0.0466238,
    -0.00403586, -0.0268673, -0.0608839, 0.112274,    -0.204023,    -0.0625751,
    0.00138372,  -0.0676488, 0.0998972,  -0.156976,   0.0427417,    0.0335938,
    0.160704,    0.0279051,  -0.164548,  -0.0493528,  -0.069609,    0.206675,
    -0.0583855,  -0.060807,  -0.0822547, -0.0206021,  -0.0400896,   0.00799485,
    -0.0222549,  0.0036515,  0.0995513,  0.0785264,   -0.0812938,   0.100474,
    0.0531965,   0.0893271,  0.193875,   -0.0871362,  0.0485841,    -0.0132607,
    -0.00368993, 0.209673,   0.00568865, -0.0546187,  0.0360922,    -0.108507,
    0.143369,    0.189263,   -0.0732605, 0.0595002,   0.0229468,    -0.00764892,
    0.110544,    -0.0267136, -0.0960151, -0.019795,   -0.136643,    0.226969,
    -0.0287507,  -0.0446251, -0.0277898, -0.00818704, 0.0125688,    0.0456245,
    -0.00461242, 0.164548};
float p1_feat4[FEATURE_SIZE] = {
    -0.213426,  0.0914902,    0.0532893,   -0.0175455,  -0.0775152,
    -0.04515,   0.0178911,    0.0848099,   -0.00387768, -0.0173152,
    0.00817768, -0.0602384,   -0.0798572,  -0.174188,   -0.0402357,
    0.017392,   -0.0694143,   0.0358206,   0.0263759,   -0.0434991,
    -0.0210009, -0.113835,    -0.13568,    -0.0127848,  -0.125046,
    0.149886,   -0.0340545,   -0.0598161,  -0.173881,   -0.0142438,
    -0.0154339, 0.11898,      0.0269134,   0.0216536,   0.00902233,
    -0.0768625, -0.126888,    0.0318277,   -0.145624,   0.0693375,
    -0.167585,  -0.0222679,   0.0658438,   0.0186205,   -0.0698366,
    0.001075,   -0.000652679, 0.0323268,   -0.00525982, 0.0319045,
    0.0694527,  -0.0415795,   -0.0114795,  0.0795884,   -0.0926036,
    0.0714492,  -0.0421554,   -0.0502947,  -0.0642697,  -0.0357822,
    0.151613,   -0.0911063,   -0.102163,   -0.0365116,  -0.110879,
    -0.0396598, -0.00383929,  -0.0265679,  -0.0535197,  0.110533,
    -0.201332,  -0.0619661,   -0.00353214, -0.0672259,  0.109688,
    -0.153648,  0.0454572,    0.0362429,   0.166779,    0.0309447,
    -0.17296,   -0.0482982,   -0.0689152,  0.209049,    -0.0627724,
    -0.0529822, -0.0814697,   -0.0222295,  -0.0325572,  0.0177759,
    -0.0119402, 0.0106732,    0.104697,    0.0726009,   -0.0829286,
    0.105465,   0.0621197,    0.0803563,   0.199489,    -0.0827367,
    0.0486054,  -0.00806251,  -0.00399286, 0.209971,    0.00126697,
    -0.0521759, 0.0394679,    -0.110072,   0.143436,    0.186897,
    -0.0726777, 0.0600465,    0.0230741,   -0.00982858, 0.105273,
    -0.038009,  -0.0958286,   -0.0147429,  -0.150692,   0.218647,
    -0.0266447, -0.0441518,   -0.0277964,  0.000383929, 0.0201947,
    0.0366268,  -0.00176607,  0.164398};
float p2_feat1[FEATURE_SIZE] = {
    -0.0371688,  0.0456718,   0.0854882,  0.106975,    -0.00529528, 0.0094704,
    -0.0857937,  0.00901215,  0.0951622,  0.0583499,   0.0551931,   0.0129836,
    -0.0246434,  0.0365069,   -0.0922091, 0.127087,    -0.109775,   -0.216444,
    -0.0454172,  -0.00290222, -0.0974026, -0.13559,    -0.0781563,  0.00137474,
    0.118024,    0.0982172,   0.0801929,  -0.118584,   -0.0293786,  -0.0832479,
    0.00218939,  0.0132891,   -0.049796,  -0.135437,   -0.00376779, 0.0393073,
    -0.00641543, 0.128105,    -0.136506,  -0.158196,   -0.0147657,  -0.00891032,
    -0.0568733,  -0.0356922,  0.0418531,  -0.0263236,  0.127138,    0.0804475,
    -0.0594191,  0.0706716,   0.163746,   0.144551,    0.0526982,   0.0429732,
    -0.0286658,  -0.12561,    0.148522,   -0.00519344, -0.0234723,  -0.0681258,
    0.189561,    -0.0852336,  -0.0123726, -0.0963842,  0.0129836,   -0.0715372,
    -0.00198573, -0.0198573,  -0.0195009, -0.052189,   -0.170824,   0.121639,
    -0.195569,   -0.0719445,  0.0756105,  0.196587,    0.0693987,   0.0331464,
    0.0648162,   -0.00483703, 0.16064,    -0.0278511,  0.154429,    -0.056466,
    0.19399,     0.0235233,   0.0488795,  -0.0264764,  0.012729,    -0.0526473,
    -0.00570261, 0.00376779,  -0.0784618, 0.191241,    0.106873,    -0.0652745,
    -0.104378,   0.00626268,  0.050407,   -0.0637979,  0.0161404,   -0.0171587,
    -0.102189,   0.0626268,   -0.0605902, -0.00697551, 0.0577898,   0.0528,
    -0.0453663,  -0.0215884,  0.0627796,  -0.00687368, -0.01334,    0.134368,
    -0.0399182,  0.00066191,  0.00712826, -0.230905,   0.0251017,   -0.0572806,
    0.0189917,   0.123421,    -0.117464,  -0.0412421,  0.200355,    -0.0427695,
    0.0339611,   -0.0638488};
#else
// 加密后的特征
int feature_attr = FEATURE_ATTR;

int en_p1_feat1[FEATURE_SIZE] = {
    -1170737533, -401397861,  -261597253,  -918381454,  -68078944,
    1762057248,  -1445863890, -143143252,  1675326077,  -1280898061,
    -784806081,  -664559553,  906110056,   2043925245,  420313416,
    -1134748095, -847675832,  1188774980,  -290817565,  1853139075,
    1399731888,  -1787202794, -1001869901, 761546789,   -800308635,
    1453202508,  1196585793,  2002381656,  -595828120,  -1331525925,
    288680681,   1038556924,  -1705499572, -61831964,   -438988346,
    320697171,   -402355808,  411900998,   -515416662,  -977474279,
    1085021991,  -2146762176, -1236168165, -375579457,  868670577,
    -1137922517, 960266424,   1255446810,  1814268747,  -1411879729,
    1857123079,  -2093175893, 953814793,   -1455178808, 1448874668,
    1971457242,  -793856014,  359345686,   1916103911,  -1753777666,
    1837442340,  -1861888988, 1832156523,  -1428110729, -1130499733,
    -334455938,  26592383,    -1085788405, 397895664,   -1491947613,
    1894645472,  -480221059,  1967207008,  -377197860,  4836943,
    -1750522389, -1840865294, -1902875003, 237398699,   2000418787,
    -176757364,  241880298,   -1365169746, -414648705,  -1723672345,
    657912068,   2019639816,  1381594015,  1990311869,  -581116543,
    -326802166,  -1672297764, -372461416,  -551117425,  -1480687341,
    -600940268,  980969548,   -612660202,  -1936354999, 924347678,
    -420303896,  1933262291,  1977388378,  2137762498,  1183526587,
    1333092123,  -1540764514, 1399815618,  2026018390,  1557336072,
    397319720,   1766005269,  -613062993,  1277355746,  -1904830355,
    166583803,   -178919022,  419299772,   -127022837,  -1781874955,
    1294754935,  69932994,    1533788069,  2117041834,  -1178355877,
    47611845,    -95993077,   873209092};
int en_p1_feat2[FEATURE_SIZE] = {
    -1255326641, -1847567093, -1804303031, -490517134,  -2054337031,
    203500207,   -944654627,  -1740301655, -215888830,  1234234661,
    394332958,   -1463109163, 1734529620,  1751854562,  55797269,
    -1353631340, 292306120,   -1595876167, 881038465,   1180525814,
    -196355818,  -142321466,  41851868,    858358152,   795151683,
    -269348659,  1146649510,  1806266011,  -639761076,  1607533356,
    -1819688237, 475954272,   -394455882,  603493666,   -1191512221,
    -1121678632, 399469939,   2070631101,  1100969097,  1095325626,
    474284742,   1226299444,  -2118143724, 753615418,   1603813596,
    -527300398,  1359160118,  -503790728,  -1870670593, -1487126782,
    -819056534,  692025984,   2097203399,  1469039314,  -549133324,
    840483472,   183850459,   2116537124,  1816838244,  1586866904,
    -306059667,  1518332905,  -1249555514, 1035518130,  621461442,
    -2068439756, 1285173228,  1762234582,  481711273,   -894512876,
    1095296284,  -882407284,  553660649,   1357556487,  977985494,
    606208124,   -1814344469, 1049927006,  211296150,   -1728669704,
    -228142861,  -1189887874, -1963797178, -171176702,  -558133317,
    87926707,    -21824433,   -821645435,  1446851367,  -1507919304,
    682994686,   -868653870,  -1682995775, -699514877,  658294542,
    -549746738,  528343894,   -882421793,  -176134718,  1549531462,
    -390056029,  534691386,   1400519350,  220648221,   -141765800,
    351523276,   -456221062,  2064219871,  -98770689,   1875177804,
    -1911071540, 734938920,   1581841908,  -412460688,  -1914194246,
    324899356,   -144174022,  -1332977424, 716294951,   320850021,
    -988812043,  1726452687,  -435386060,  -1042598974, 164795912,
    -1467439358, 1180177149,  1923616903};
int en_p1_feat3[FEATURE_SIZE] = {
    897312764,   2028720466,  1673657785,  -1707808956, -238407790,
    1880007650,  2006775427,  648932464,   -412992804,  -1347371892,
    2054982325,  -1368575897, -1621126176, -947118137,  -1184088794,
    -2103194226, 1274107037,  905576061,   -2004784342, 1407137275,
    1546275003,  -604905380,  1751692150,  1532064770,  -407769405,
    1075936887,  -516920511,  -1399351927, -1825479938, -1690881567,
    849061362,   -873365362,  -1594646094, 676100818,   -1804257730,
    1745810078,  -490260430,  -2136149653, -1579193841, -465737911,
    -1066538947, -755262321,  -1825713656, -690342908,  -971848870,
    177612009,   -688477257,  -1897043103, -1192881567, 1308778190,
    538518150,   1706116661,  -587867005,  193981622,   -1167237096,
    -1259531532, 1509380481,  694713260,   -313295259,  -1590884262,
    884898408,   66368428,    653395669,   1341779308,  343349715,
    -1292924252, -603170131,  -677158199,  590843970,   -839485508,
    -628220307,  -899823773,  -379437825,  -598194227,  709130415,
    -558627633,  2096676732,  1564906700,  -1564526351, -817292561,
    -114839465,  -225364533,  -97249207,   820391281,   597993907,
    1381860822,  1796367611,  1195171635,  1558699092,  1677728403,
    -333929757,  1864393520,  -1079250215, -1811507186, -743684183,
    -1380868628, -697656745,  1318846534,  -1947183289, 876586523,
    -60412536,   1931554943,  65714578,    1591282872,  1474717691,
    -1681958947, -2068655966, 2125356645,  51480310,    -1670276987,
    -823113056,  711691533,   -763798011,  1701054842,  -1231243872,
    711437952,   -1672240202, 624885187,   -1687656103, -883207946,
    -212747068,  784915603,   717162858,   940770722,   20979415,
    -1909514254, 1622987323,  -173455586};
int en_p1_feat4[FEATURE_SIZE] = {
    1561087197,  -790520691,  998827072,   630004713,   710057120,
    1273866507,  -1402947446, 996454687,   23562968,    1806807083,
    -1799923188, 788170526,   642593864,   2129023094,  -61395515,
    226094411,   -807675459,  2022001571,  253243638,   815479164,
    2040362743,  5531390,     102290404,   2047622269,  -831533717,
    606194312,   431207949,   1357932426,  1783539020,  655598042,
    -1249518240, -818225949,  -1797578923, 1251156816,  1810092684,
    -1250363617, 1853433206,  -798841638,  -1578668404, 1425873307,
    765762810,   -1685752047, 786632369,   -1796210540, 1429833958,
    -558739033,  -1750036345, 678823642,   -1571887388, -997105628,
    2014711230,  -2020032040, -338580169,  2095892399,  -1794802492,
    -1402527848, -1690887017, 348904366,   -183736450,  -513217652,
    -4162748,    -1918957099, -1647750651, 1771786726,  403566951,
    766978305,   -621924772,  1541527637,  1391498751,  1160038093,
    -570930855,  1192712628,  -173637263,  966919689,   -1001618951,
    1903666246,  -1955349095, -1145081385, -378956089,  1641415615,
    -1665476382, -1419655284, 1214091822,  937982526,   1381360107,
    -1144454315, -1999385375, -136421106,  1854660100,  -62265173,
    -2093022550, 731598187,   1989608034,  -388384848,  -676074629,
    -618037084,  -1940629770, 433526540,   -1716197863, 1115426902,
    15420104,    151742389,   -1271591128, 1611465969,  821123676,
    -942532131,  442544116,   -1207711325, -194787127,  -285233322,
    -717721044,  -1282843814, 1577672061,  1727201482,  133195556,
    1615416923,  -1824440944, -1189402698, -737788617,  1790049542,
    1341139283,  -308389432,  239628494,   -790369474,  328147746,
    -440380331,  -1858045027, -479054215};
int en_p2_feat1[FEATURE_SIZE] = {
    -336410109,  -81233050,   -819118727,  1140401168,  -1390732699,
    1826054374,  860001947,   643293475,   115153996,   614854369,
    -1314895213, -876723982,  -96439621,   -1922857018, -1582220697,
    -614932429,  1513189202,  -1022681597, 37270424,    1840652921,
    -1583389110, 603809257,   -256656604,  43007700,    824161104,
    375095638,   -1846987945, -66789321,   2120442847,  515055985,
    1849506321,  -72036458,   699470552,   2133030563,  1644228115,
    1432326484,  -683893628,  1311057455,  -101523443,  1068628773,
    -1575762946, -362607592,  1954149062,  917648985,   -1711906189,
    1332974033,  -1357525919, 1645098217,  1879644251,  913646855,
    -259871036,  -166705741,  -952832446,  -426299808,  -444917983,
    338863045,   -1992784352, -421719875,  -433488157,  1240532292,
    1747285436,  -1684534156, -1977299302, -591833828,  627777133,
    -378675046,  777009850,   874670058,   -1607349635, 1849288917,
    -191726270,  -1528930639, 1279616404,  753254580,   -1543495569,
    -1105129316, 1358753657,  723697069,   -1698050979, -2018426482,
    -873385235,  49302725,    984578464,   -199573600,  -682140934,
    1170103019,  -1177174726, -225171559,  1812363366,  1068476075,
    1713502089,  2083989415,  238882884,   -221937237,  -956423072,
    -1503465129, 1163320338,  -904651070,  -33736609,   1796306117,
    767981093,   1644044478,  471236495,   717165112,   -1425987767,
    1022188392,  -1783094996, 1952346714,  1960053148,  -1994468566,
    -145042448,  466620170,   -2025240731, 921110704,   1060317906,
    -1859231945, 708562134,   1274381029,  -1931151116, -888471503,
    -1226516327, 770569647,   1013691765,  1123823099,  -1003548272,
    -1899567898, -77046379,   937998657};
#endif
/**
 * 特征保存在sqlite和内存中
 * 适用于一些嵌入式的场景，需要SDK支持特征的管理和检索的能力
 */
int main(int argc, char *argv[]) {
  // 版本信息
  std::cout << hobot::warehouse::HobotXWHGetVersion() << std::endl;

  char last_model_version[50] = {"MD-0.1.15-S"};
  char current_model_version[50] = {"MD-0.1.16-S"};
  bool is_update_db;
  auto ret_status = hobot::warehouse::HobotXWHCheckModelVersion(
      current_model_version, last_model_version, &is_update_db);
  if (ret_status != hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHCheckModelVersion failed! ret : " << ret_status
              << std::endl;
    return -1;
  }
  std::cout << "is_update_db = " << is_update_db << std::endl;
  // 初始化
  hobot::warehouse::HobotXWHDataSourceInfo wh_ds;
  // 特征保存在sqlite
  wh_ds.type_ = hobot::warehouse::HobotXWHDataSourceType::SQLITE;
  // 分库信息db保存的目录，必须为目录。
  strncpy(wh_ds.db_file_, "./", HOBOT_FILENAME_LENGTH);
  // 初始化，如果目录下存在db文件，则加载db文件里面所有的分库。
  // 如果不存在db文件，则会创建db文件。
  if (hobot::warehouse::HobotXWHInit(&wh_ds) != hobot::warehouse::Errcode_Ok) {
    return -1;
  }

  // 创建分库
  std::cout << "create set...." << std::endl;
  char set_name[] = "test";  // 分库名称，不为空,必须有用户指定。
  // 底库模型版本和加密key版本，创建分库的时候，必须由用户指定正确的模型版本和加密key版本。
  char model_version[] = "FaceID-X1-V3.2";  //分库模型，不为空

  // 构建分库数据源信息
  hobot::warehouse::HobotXWHDataSourceInfo set_ds;
  set_ds.type_ = hobot::warehouse::HobotXWHDataSourceType::SQLITE;
  set_ds.is_check_attr_ = 0;
  // 必须为目录，保存分库db文件的目录,每个分库目录可以不一样
  strncpy(set_ds.db_file_, "./", HOBOT_FILENAME_LENGTH);
  auto creat_status = hobot::warehouse::HobotXWHCreateSet(
      set_name, model_version, FEATURE_SIZE, &set_ds);
  if (creat_status != hobot::warehouse::Errcode_Ok) {
    std::cout << creat_status << ",HobotXWHCreateSet failed " << std::endl;
    return -1;
  }

  // 设置分库阈值
  if (hobot::warehouse::HobotXWHSetThreshold(set_name, model_version, 194.0,
                                             194.0) !=
      hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHSetThreshold failed!" << std::endl;
    return -1;
  }

  // 列出SDK所加载底库
  hobot::warehouse::HobotXWHListSetResult *set_result = nullptr;
  if (hobot::warehouse::HobotXWHListSet(&set_result) !=
      hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHListSet failed" << std::endl;
    return -1;
  }
  for (int i = 0; i < set_result->num_; ++i) {
    std::cout << "set_name = " << set_result->sets_[i].set_name_ << std::endl;
    std::cout << "model_version  = " << set_result->sets_[i].model_version_
              << std::endl;
    std::cout << "feature_size  = " << set_result->sets_[i].feature_size_
              << std::endl;
    std::cout << "distance_threshold = "
              << set_result->sets_[i].distance_threshold_ << std::endl;
    std::cout << "similar_threshold = "
              << set_result->sets_[i].similar_threshold_ << std::endl;
  }
  // 释放set_result
  hobot::warehouse::HobotXWHReleaseSetResult(&set_result);

  // 新增记录，只修改内存中的数据，不会修改文件中的数据

  hobot::warehouse::HobotXWHRecord record;
  char id[] = "person-1";
  strncpy(record.id_, id, HOBOT_ID_LENGTH);
  record.size_ = 2;
  hobot::warehouse::HobotXWHFeature feature[2];
  record.features_ = feature;
  strncpy(record.features_[0].img_uri_, "feat-1", HOBOT_URI_LENGTH);
  record.features_[0].size_ = FEATURE_SIZE;
  record.features_[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  record.features_[0].feature_ = en_p1_feat1;
#else
  record.features_[0].feature_ = p1_feat1;
#endif

  strncpy(record.features_[1].img_uri_, "feat-2", HOBOT_URI_LENGTH);
  record.features_[1].size_ = FEATURE_SIZE;
  record.features_[1].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  record.features_[1].feature_ = en_p1_feat2;
#else
  record.features_[1].feature_ = p1_feat2;
#endif

  auto ret =
      hobot::warehouse::HobotXWHAddRecord(set_name, model_version, &record);
  if (ret != hobot::warehouse::Errcode_Ok) {
    std::cout << "add record failed," << ret << std::endl;
    return -1;
  }

  hobot::warehouse::HobotXWHFeature add_feature[1];
  strncpy(add_feature->img_uri_, "feat-3", HOBOT_URI_LENGTH);
  add_feature[0].size_ = FEATURE_SIZE;
  add_feature[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  add_feature[0].feature_ = en_p1_feat3;
#else
  add_feature[0].feature_ = p1_feat3;
#endif

  ret = hobot::warehouse::HobotXWHAddFeature(set_name, model_version, id,
                                             add_feature);
  if (ret != hobot::warehouse::Errcode_Ok) {
    std::cout << "add feature failed," << ret << std::endl;
    return -1;
  }

  // 列出底库下所有的记录
  hobot::warehouse::HobotXWHListRecordResult *listRecordResult = nullptr;
  ret = hobot::warehouse::HobotXWHListRecord(set_name, model_version,
                                             &listRecordResult);
  if (ret != hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHListRecord failed" << std::endl;
    return -1;
  }
  // 打印结果
  for (int i = 0; i < listRecordResult->num_; ++i) {
    std::cout << "id =" << listRecordResult->record_[i].id_ << std::endl;
    for (int j = 0; j < listRecordResult->record_[i].size_; ++j) {
      std::cout << "url = "
                << listRecordResult->record_[i].features_[j].img_uri_
                << std::endl;
    }
  }
  // 释放结果内存
  hobot::warehouse::HobotXWHReleaseListRecordResult(&listRecordResult);

  // 删除特征
  // 只修改内存中的数据，不会修改文件中的数据
  if (hobot::warehouse::HobotXWHDeleteFeature(set_name, model_version, id,
                                              "feat-3") !=
      hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHDeleteFeature error" << std::endl;
    return -1;
  }
  // 更新特征
  hobot::warehouse::HobotXWHFeature update_feature[1];
  strncpy(update_feature->img_uri_, "feat-2", HOBOT_URI_LENGTH);
  update_feature[0].size_ = FEATURE_SIZE;
  update_feature[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  update_feature[0].feature_ = en_p1_feat4;
#else
  update_feature[0].feature_ = p1_feat4;
#endif
  ret = hobot::warehouse::HobotXWHUpdateFeature(set_name, model_version, id,
                                                update_feature);
  if (ret != hobot::warehouse::Errcode_Ok) {
    std::cout << "update feature failed," << ret << std::endl;
    return -1;
  }
  // 查看某个记录的信息
  hobot::warehouse::HobotXWHListFeatureResult *listFeatureResult = nullptr;
  ret = hobot::warehouse::HoboXWHListFeature(set_name, model_version, id,
                                             &listFeatureResult);
  if (hobot::warehouse::Errcode_Ok != ret) {
    std::cout << "HoboXWHListFeature error" << std::endl;
    return -1;
  }
  std::cout << "id = " << listFeatureResult->record_.id_ << std::endl;
  for (int i = 0; i < listFeatureResult->record_.size_; ++i) {
    std::cout << "url = " << listFeatureResult->record_.features_[i].img_uri_
              << std::endl;
  }

  hobot::warehouse::HobotXWHReleaseListFeatureResult(&listFeatureResult);

  // 检索 1:N
  // 检索前申请内存
  auto result = hobot::warehouse::HobotXWHAllocSearchResult();
  for (int i = 0; i < 1; i++) {
    // 构建检索的参数
    hobot::warehouse::HobotXWHSearchParam searchParam;
    searchParam.top_n_ = 5;  // top_N
    // 距离阈值。可以设置为-1，设置为-1的时候，实际使用的阈值是接口HobotXWHSetThreshold里设置的值。
    // 如果需要更新阈值，采用跟HobotXWHSetThreshold接口不一样的阈值的话，
    // 模型版本是IPC3.0均建议距离阈值设为194。否则，应根据实际模型版本来给出一个合理的阈值。

    searchParam.similar_threshold_ = 194.0;
    // 相似度计算参数。可以设置为-1，设置为-1的时候，实际使用的阈值是接口HobotXWHSetThreshold里设置的值。
    // 如果需要更新阈值，采用跟HobotXWHSetThreshold接口不一样的阈值的话，
    // 模型版本是IPC3.0均建议相似度计算参数设为194。否则，应根据实际模型版本来给出一个合理的计算参数。
    searchParam.distance_threshold_ = 194.0;
    searchParam.size_ = 1;
    hobot::warehouse::HobotXWHFeature features[1];
    searchParam.features_ = features;
    searchParam.features_[0].size_ = FEATURE_SIZE;
    searchParam.features_[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
    searchParam.features_[0].feature_ = en_p1_feat4;
#else
    searchParam.features_[0].feature_ = p1_feat4;
#endif
    auto ret = hobot::warehouse::HobotXWHSearch(set_name, model_version,
                                                &searchParam, result);
    if (ret != hobot::warehouse::Errcode_Ok) {
      std::cout << "search failed," << ret << std::endl;
      return -1;
    }
    if (result) {
      // std::cout << "is_matched = " << result->is_matched_ << std::endl;
      for (int i = 0; i < result->num_; ++i) {
        std::cout << "id = " << result->id_score_[i].id_
                  << ",dis = " << result->id_score_[i].distance_
                  << ",sim = " << result->id_score_[i].similar_ << std::endl;
      }
    }
  }
  // 检索完后释放内存
  hobot::warehouse::HobotXWHReleaseSearchResult(&result);
  // 1:1比对
  hobot::warehouse::HobotXWHRecord record1, record2;
  record1.size_ = 1;
  hobot::warehouse::HobotXWHFeature features1[1];
  features1[0].size_ = FEATURE_SIZE;
  features1[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  features1[0].feature_ = en_p1_feat1;
#else
  features1[0].feature_ = p1_feat1;
#endif
  record1.features_ = features1;

  record2.size_ = 1;
  hobot::warehouse::HobotXWHFeature features2[1];
  features2[0].size_ = FEATURE_SIZE;
  features2[0].feature_attr_ = feature_attr;
#ifdef ENCRYPT_FEATURE
  features2[0].feature_ = en_p2_feat1;
#else
  features2[0].feature_ = p2_feat1;
#endif
  record2.features_ = features2;

  hobot::warehouse::HobotXWHCompareResult compare_result;
  ret = hobot::warehouse::HobotXWHFeatureCompare1V1(&record1, &record2, 194,
                                                    194, &compare_result);
  if (ret != hobot::warehouse::Errcode_Ok) {
    std::cout << "HobotXWHFeatureCompare1V1 error!" << std::endl;
  }

  std::cout << "is_matched = " << compare_result.is_matched_
            << ", distance = " << compare_result.distance_
            << ", similar = " << compare_result.similar_ << std::endl;

  hobot::warehouse::HobotXWHDropSet(set_name, model_version);

  hobot::warehouse::HobotXWHClose();

  std::cout << "The End!" << std::endl;
  return 0;
}
